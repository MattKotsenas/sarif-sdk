{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SARIF Functional Testing",
          "rules": [
            {
              "id": "JSON1008",
              "fullDescription": {
                "text": "A numeric value is less than the minimum value permitted by the schema's \"minimum\" property."
              },
              "messageStrings": {
                "default": {
                  "text": "at \"{0}\": The value {1} is less than the minimum value of {2}."
                }
              },
              "name": "ValueTooSmall",
              "defaultConfiguration": {
                "level": "error"
              }
            }
          ]
        }
      },
      "invocations": [
        {
          "toolExecutionNotifications": [
            {
              "message": {
                "text": "Newtonsoft.Json.JsonReaderException: JSON integer 21474836470 is too large or small for an Int32. Path 'runs[0].results[0].relatedLocations[0].id', line 38, position 30.\r\n   at Newtonsoft.Json.JsonTextReader.ParseReadNumber(ReadType readType, Char firstChar, Int32 initialPosition)\r\n   at Newtonsoft.Json.JsonTextReader.ParseNumber(ReadType readType)\r\n   at Newtonsoft.Json.JsonTextReader.ReadNumberValue(ReadType readType)\r\n   at Newtonsoft.Json.JsonTextReader.ReadAsInt32()\r\n   at Newtonsoft.Json.JsonReader.ReadForType(JsonContract contract, Boolean hasConverter)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)\r\n   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)\r\n   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value)\r\n   at Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand.Deserialize(String logContents) in C:\\GH\\s-s\\src\\Sarif.Multitool.Library\\ValidateCommand.cs:line 85\r\n   at Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand.AnalyzeTarget(IEnumerable`1 skimmers, SarifValidationContext context, ISet`1 disabledSkimmers) in C:\\GH\\s-s\\src\\Sarif.Multitool.Library\\ValidateCommand.cs:line 70\r\n   at Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DetermineApplicabilityAndAnalyze(TOptions options, IEnumerable`1 skimmers, TContext rootContext, String target, ISet`1 disabledSkimmers) in C:\\GH\\s-s\\src\\Sarif.Driver\\Sdk\\AnalyzeCommandBase.cs:line 639\r\n   at Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.AnalyzeTargets(TOptions options, IEnumerable`1 skimmers, TContext rootContext, IEnumerable`1 targets) in C:\\GH\\s-s\\src\\Sarif.Driver\\Sdk\\AnalyzeCommandBase.cs:line 567\r\n   at Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.Analyze(TOptions options, AggregatingLogger logger) in C:\\GH\\s-s\\src\\Sarif.Driver\\Sdk\\AnalyzeCommandBase.cs:line 181\r\n   at Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.Run(TOptions options) in C:\\GH\\s-s\\src\\Sarif.Driver\\Sdk\\AnalyzeCommandBase.cs:line 85"
              },
              "level": "error",
              "exception": {
                "kind": "JsonReaderException",
                "message": "JSON integer 21474836470 is too large or small for an Int32. Path 'runs[0].results[0].relatedLocations[0].id', line 38, position 30.",
                "stack": {
                  "frames": [
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.JsonTextReader.ParseReadNumber(ReadType readType, Char firstChar, Int32 initialPosition)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.JsonTextReader.ParseNumber(ReadType readType)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.JsonTextReader.ReadNumberValue(ReadType readType)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.JsonTextReader.ReadAsInt32()"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.JsonReader.ReadForType(JsonContract contract, Boolean hasConverter)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, String id)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, String id)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, String id)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectType)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "file:///C:/GH/s-s/src/Sarif.Multitool.Library/ValidateCommand.cs"
                          },
                          "region": {
                            "startLine": 85
                          }
                        },
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand.Deserialize(String logContents)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "file:///C:/GH/s-s/src/Sarif.Multitool.Library/ValidateCommand.cs"
                          },
                          "region": {
                            "startLine": 70
                          }
                        },
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand.AnalyzeTarget(IEnumerable`1 skimmers, SarifValidationContext context, ISet`1 disabledSkimmers)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "file:///C:/GH/s-s/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                          },
                          "region": {
                            "startLine": 639
                          }
                        },
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DetermineApplicabilityAndAnalyze(TOptions options, IEnumerable`1 skimmers, TContext rootContext, String target, ISet`1 disabledSkimmers)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "file:///C:/GH/s-s/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                          },
                          "region": {
                            "startLine": 567
                          }
                        },
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.AnalyzeTargets(TOptions options, IEnumerable`1 skimmers, TContext rootContext, IEnumerable`1 targets)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "file:///C:/GH/s-s/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                          },
                          "region": {
                            "startLine": 181
                          }
                        },
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.Analyze(TOptions options, AggregatingLogger logger)"
                          }
                        ]
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "file:///C:/GH/s-s/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                          },
                          "region": {
                            "startLine": 85
                          }
                        },
                        "logicalLocations": [
                          {
                            "fullyQualifiedName": "Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.Run(TOptions options)"
                          }
                        ]
                      }
                    }
                  ]
                },
                "innerExceptions": []
              },
              "descriptor": {
                "id": "ERR999.UnhandledEngineException"
              }
            }
          ],
          "executionSuccessful": false
        }
      ],
      "artifacts": [
        {
          "location": {
            "uri": "FunctionalTestOutput.ValidateCommand/Inputs.JSON1003.LocationIdMustBeValid.sarif",
            "uriBaseId": "TEST_DIR"
          }
        }
      ],
      "results": [
        {
          "ruleId": "JSON1008",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "id": "default",
            "arguments": [
              "runs[0].results[0].locations[0].id",
              "-12345",
              "-1"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 0
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 25
                }
              }
            }
          ],
          "properties": {
            "jsonPath": "runs[0].results[0].locations[0].id"
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}