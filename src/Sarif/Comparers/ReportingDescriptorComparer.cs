// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.Collections.Generic;

/// <summary>
/// Note: This comparer may not have all properties compared. Will be replaced by comprehensive
/// comparer generated by JSchema as part of EqualityComparer in a planned comprehensive solution.
/// Tracking by issue: https://github.com/microsoft/jschema/issues/141
/// </summary>
namespace Microsoft.CodeAnalysis.Sarif.Comparers
{
    internal class ReportingDescriptorComparer : IComparer<ReportingDescriptor>
    {
        internal static readonly ReportingDescriptorComparer Instance = new ReportingDescriptorComparer();

        public int Compare(ReportingDescriptor left, ReportingDescriptor right)
        {
            if (ComparerHelper.CompareReference(left, right, out int compareResult))
            {
                return compareResult;
            }

            compareResult = string.Compare(left.Id, right.Id);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = ComparerHelper.CompareList<string>(left.DeprecatedIds, right.DeprecatedIds);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = string.Compare(left.Guid, right.Guid);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = ComparerHelper.CompareList<string>(left.DeprecatedGuids, right.DeprecatedGuids);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = string.Compare(left.Name, right.Name);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = ComparerHelper.CompareList<string>(left.DeprecatedNames, right.DeprecatedNames);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = MultiformatMessageStringComparer.Instance.Compare(left.ShortDescription, right.ShortDescription);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = MultiformatMessageStringComparer.Instance.Compare(left.FullDescription, right.FullDescription);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = ReportingConfigurationComparer.Instance.Compare(left.DefaultConfiguration, right.DefaultConfiguration);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = ComparerHelper.CompareUri(left.HelpUri, right.HelpUri);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = MultiformatMessageStringComparer.Instance.Compare(left.Help, right.Help);

            if (compareResult != 0)
            {
                return compareResult;
            }

            // Note: There may be other properties are not compared.
            return compareResult;
        }
    }
}
