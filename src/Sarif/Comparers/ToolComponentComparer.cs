// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.Collections.Generic;

/// <summary>
/// Warning this comparer may not have all properties compared. Will be replaced by comprehensive
/// comparer generated by JSchema as part of EqualityComparer in a planned comprehensive solution.
/// Tracking by issue: https://github.com/microsoft/jschema/issues/141
/// </summary>

namespace Microsoft.CodeAnalysis.Sarif.Comparers
{
    internal class ToolComponentComparer : IComparer<ToolComponent>
    {
        internal static readonly ToolComponentComparer Instance = new ToolComponentComparer();

        public int Compare(ToolComponent left, ToolComponent right)
        {
            if (ComparerHelper.CompareReference(left, right, out int compareResult))
            {
                return compareResult;
            }

            compareResult = string.Compare(left.Guid, right.Guid);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = string.Compare(left.Name, right.Name);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = string.Compare(left.Organization, right.Organization);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = string.Compare(left.Product, right.Product);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = string.Compare(left.FullName, right.FullName);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = string.Compare(left.Version, right.Version);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = string.Compare(left.SemanticVersion, right.SemanticVersion);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = string.Compare(left.ReleaseDateUtc, right.ReleaseDateUtc);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = ComparerHelper.CompareUri(left.DownloadUri, right.DownloadUri);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = ComparerHelper.CompareUri(left.InformationUri, right.InformationUri);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = ComparerHelper.CompareList(left.Rules, right.Rules, ReportingDescriptorComparer.Instance);

            if (compareResult != 0)
            {
                return compareResult;
            }

            // Warning there may be properties are not compared.
            return compareResult;
        }
    }
}
